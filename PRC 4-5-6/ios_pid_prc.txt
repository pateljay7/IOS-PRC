########################################

#include  <stdio.h>
#include  <string.h>
#include  <sys/types.h>
#define   MAX_COUNT  200
#define   BUF_SIZE   100
void  main(void)
{     
    pid_t  pid,ppid.id;
    int    i;    
    char   buf[BUF_SIZE];     
    id=fork();
    if(id==0)
        printf("child\n");
    else
        printf("parant\n")
    //pid = getpid();
    //printf("pid : %d\n", pid);
    //ppid = getppid();
    //printf("ppid : %d\n", pid);
    //...............
    pid=getpid();
    printf("child %d i am child ");
    //...............
    

    /*for (i = 1; i <= MAX_COUNT; i++) {        
        sprintf(buf, "This line is from pid %d, value = %d\n", pid, i);          
        write(1, buf, strlen(buf));     } */
    
}


########################################

#include <sys/wait.h>
int main(){
  pid_t c_pid, pid;
  int status;
  c_pid = fork(); 
  if( c_pid == 0 ){
    //child
    pid = getpid();
    printf("Child: %d: I'm the child\n", pid, c_pid);
    printf("Child: sleeping for 2-seconds, then exiting with status 12\n");
    sleep(2);
}
else if (c_pid > 0){
    //parent
    //waiting for child to terminate
    pid = wait(&status);
    if ( WIFEXITED(status) ){
      printf("Parent: Child exited with status: %d\n", WEXITSTATUS(status));
    }
  }else{
    //error: The return of fork() is negative
    perror("fork failed");
    //exit(2);
  }
  return 0; //success                                                   
}

########################################################